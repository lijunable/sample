创建版本库
	初始化一个Git仓库，使用git init命令。		
	添加文件到Git仓库，分两步：		
	 第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	 第二步，使用命令git commit，完成。
版本回退
    	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
    	穿梭前，用git log（git log --pretty=oneline）可以查看提交历史，以便确定要回退到哪个版本。
    	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
撤销修改
    	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	 	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	  		（git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。）
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
添加远程库
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；		
克隆远程库
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
		Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。	
创建与合并分支	
	查看分支：git branch,git branch -a查看所有分支
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
解决冲突
   git log --graph --pretty=oneline --abbrev-commit	
合并策略
	git merge --no-ff -m "merge with no-ff" dev
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
bug分支	   
  	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场
多人协作
    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream-to=origin/branch-name
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。解决完冲突后再commit，再push
    

	  